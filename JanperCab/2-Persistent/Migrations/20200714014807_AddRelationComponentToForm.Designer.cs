// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2_Persistent;

namespace _2_Persistent.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200714014807_AddRelationComponentToForm")]
    partial class AddRelationComponentToForm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_1_Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("_1_Domain.DuraformArch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformArches");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bottom")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<Guid>("DuraformFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Left")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Right")
                        .HasColumnType("bit");

                    b.Property<bool>("Top")
                        .HasColumnType("bit");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformEdgeProfileId");

                    b.HasIndex("DuraformFormId");

                    b.ToTable("DuraformComponents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformComponent");
                });

            modelBuilder.Entity("_1_Domain.DuraformDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformSerieId")
                        .HasColumnType("int");

                    b.Property<int?>("FixedEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("HasNoArch")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultEdgeProfileId");

                    b.HasIndex("DuraformSerieId");

                    b.HasIndex("FixedEdgeProfileId");

                    b.ToTable("DuraformDesigns");
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrawerDesign")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformDrawerTypes");
                });

            modelBuilder.Entity("_1_Domain.DuraformEdgeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ForcedValuePerItem")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformEdgeProfiles");
                });

            modelBuilder.Entity("_1_Domain.DuraformForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerOrderNumber")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DuraformArchId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformDesignId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformSerieId")
                        .HasColumnType("int");

                    b.Property<int?>("DuraformWrapColorId")
                        .HasColumnType("int");

                    b.Property<int?>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HingeHoleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRoutingOnly")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DuraformArchId");

                    b.HasIndex("DuraformDesignId");

                    b.HasIndex("DuraformEdgeProfileId");

                    b.HasIndex("DuraformSerieId");

                    b.HasIndex("DuraformWrapColorId");

                    b.HasIndex("DuraformWrapTypeId");

                    b.HasIndex("HingeHoleTypeId");

                    b.ToTable("DuraformForms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformForm");
                });

            modelBuilder.Entity("_1_Domain.DuraformOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformOptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DuraformOptionTypeId");

                    b.ToTable("DuraformOptions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformOption");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformOptionTypes");
                });

            modelBuilder.Entity("_1_Domain.DuraformSerie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformSeries");
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsJanperMatching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLaminexMatching")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformWrapTypeId");

                    b.ToTable("DuraformWrapColors");
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformWrapTypes");
                });

            modelBuilder.Entity("_1_Domain.HingeHoleOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Bottom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Top")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("HingeHoleOptions");
                });

            modelBuilder.Entity("_1_Domain.HingeHoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("HingeHoleTypes");
                });

            modelBuilder.Entity("_1_Domain.NotAvailableDesignWrapType", b =>
                {
                    b.Property<int>("DuraformDesignId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasKey("DuraformDesignId", "DuraformWrapTypeId");

                    b.HasIndex("DuraformWrapTypeId");

                    b.ToTable("NotAvailableDesignWrapTypes");
                });

            modelBuilder.Entity("_1_Domain.PantryDoorChairRailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PantryDoorChairRailTypes");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponentWithOption", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponent");

                    b.HasDiscriminator().HasValue("DuraformComponentWithOption");
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawer", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponent");

                    b.Property<decimal>("DrawerFive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrawerFour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrawerOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrawerThree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrawerTwo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DuraformDrawerTypeId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformDrawerTypeId");

                    b.HasDiscriminator().HasValue("DuraformDrawer");
                });

            modelBuilder.Entity("_1_Domain.DuraformDraft", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformForm");

                    b.HasDiscriminator().HasValue("DuraformDraft");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionDoubleSided", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<bool>("HasProfile")
                        .HasColumnName("HasProfile")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("DuraformOptionDoubleSided");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionFoldBack", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<bool>("HasDoubleReturn")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProfile")
                        .HasColumnName("HasProfile")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformOptionFoldBack");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionNoFace", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.HasDiscriminator().HasValue("DuraformOptionNoFace");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionPaneFrame", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<int>("Columns")
                        .HasColumnType("int");

                    b.Property<int>("Rows")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformOptionPaneFrame");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponentWithOptionAndHingeHole", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOption");

                    b.HasDiscriminator().HasValue("DuraformComponentWithOptionAndHingeHole");
                });

            modelBuilder.Entity("_1_Domain.DuraformEndPanel", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOption");

                    b.Property<decimal>("ExtraRailBottom")
                        .HasColumnName("ExtraRailBottom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExtraRailTop")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfShields")
                        .HasColumnType("int");

                    b.Property<decimal>("RailCenter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RailLeft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RailRight")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformEndPanel");
                });

            modelBuilder.Entity("_1_Domain.DuraformDoor", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOptionAndHingeHole");

                    b.HasDiscriminator().HasValue("DuraformDoor");
                });

            modelBuilder.Entity("_1_Domain.DuraformPantryDoor", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOptionAndHingeHole");

                    b.Property<decimal>("ChairRailHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChairRailTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExtraRailBottom")
                        .HasColumnName("ExtraRailBottom")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("ChairRailTypeId");

                    b.HasDiscriminator().HasValue("DuraformPantryDoor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformComponent", b =>
                {
                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DuraformEdgeProfile")
                        .WithMany("DuraformComponents")
                        .HasForeignKey("DuraformEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformForm", "DuraformForm")
                        .WithMany("DuraformComponents")
                        .HasForeignKey("DuraformFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformDesign", b =>
                {
                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DefaultEdgeProfile")
                        .WithMany("DuraformDesignsWithDefault")
                        .HasForeignKey("DefaultEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.DuraformSerie", "DuraformSerie")
                        .WithMany("DuraformDesigns")
                        .HasForeignKey("DuraformSerieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformEdgeProfile", "FixedEdgeProfile")
                        .WithMany("DuraformDesignsWithFixed")
                        .HasForeignKey("FixedEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.DuraformForm", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", "CreatedByUser")
                        .WithMany("DuraformForms")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformArch", "DuraformArch")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformArchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.DuraformDesign", "DuraformDesign")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformDesignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DuraformEdgeProfile")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformSerie", "DuraformSerie")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformSerieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformWrapColor", "DuraformWrapColor")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformWrapColorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformForms")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.HingeHoleType", "HingeHoleType")
                        .WithMany("DuraformForms")
                        .HasForeignKey("HingeHoleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.DuraformOption", b =>
                {
                    b.HasOne("_1_Domain.DuraformOptionType", "DuraformOptionType")
                        .WithMany("DuraformOptions")
                        .HasForeignKey("DuraformOptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformComponentWithOption", "DuraformComponentWithOption")
                        .WithOne("DuraformOption")
                        .HasForeignKey("_1_Domain.DuraformOption", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapColor", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformWrapColors")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.HingeHoleOption", b =>
                {
                    b.HasOne("_1_Domain.DuraformComponentWithOptionAndHingeHole", "DuraformComponentWithOptionAndHingeHole")
                        .WithOne("HingeHoleOption")
                        .HasForeignKey("_1_Domain.HingeHoleOption", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.NotAvailableDesignWrapType", b =>
                {
                    b.HasOne("_1_Domain.DuraformDesign", "DuraformDesign")
                        .WithMany("NotAvailableDesignWrapTypes")
                        .HasForeignKey("DuraformDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("NotAvailableDesignWrapTypes")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawer", b =>
                {
                    b.HasOne("_1_Domain.DuraformDrawerType", "DuraformDrawerType")
                        .WithMany("DuraformDrawers")
                        .HasForeignKey("DuraformDrawerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformPantryDoor", b =>
                {
                    b.HasOne("_1_Domain.PantryDoorChairRailType", "ChairRailType")
                        .WithMany("DuraformPantryDoors")
                        .HasForeignKey("ChairRailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
