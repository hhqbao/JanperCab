// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2_Persistent;

namespace _2_Persistent.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210616030837_EditTable_DeliverySheets_AddCol_CompletedDate")]
    partial class EditTable_DeliverySheets_AddCol_CompletedDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_1_Domain.ApplicationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationFile");
                });

            modelBuilder.Entity("_1_Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("_1_Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryPostcode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryState")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliverySuburb")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryTo")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoicePostcode")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceState")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceSuburb")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceTo")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCategoryId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");
                });

            modelBuilder.Entity("_1_Domain.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerCategories");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CustomerCategory");
                });

            modelBuilder.Entity("_1_Domain.DeliverySheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeliverySheets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DeliverySheet");
                });

            modelBuilder.Entity("_1_Domain.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("_1_Domain.DuraformArch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformArches");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Bottom")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformEnquiryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Left")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Right")
                        .HasColumnType("bit");

                    b.Property<int>("SortNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Top")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformEdgeProfileId");

                    b.HasIndex("DuraformEnquiryId");

                    b.ToTable("DuraformComponents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformComponent");
                });

            modelBuilder.Entity("_1_Domain.DuraformDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BB")
                        .HasColumnType("int");

                    b.Property<int>("BL")
                        .HasColumnType("int");

                    b.Property<int>("BR")
                        .HasColumnType("int");

                    b.Property<int>("BT")
                        .HasColumnType("int");

                    b.Property<int>("DefaultEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<decimal>("DrawerBorderOffset")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DuraformSerieId")
                        .HasColumnType("int");

                    b.Property<int>("H_SPLIT_THICKNESS")
                        .HasColumnType("int");

                    b.Property<bool>("HasNoArch")
                        .HasColumnType("bit");

                    b.Property<string>("ICB_EXTERNAL_SHAPE_FILE")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ICB_GLASS_TOOLING")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ICB_TOOLING")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("V_SPLIT_THICKNESS")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultEdgeProfileId");

                    b.HasIndex("DuraformSerieId");

                    b.ToTable("DuraformDesigns");
                });

            modelBuilder.Entity("_1_Domain.DuraformDesignEdgeProfile", b =>
                {
                    b.Property<int>("DuraformDesignId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformEdgeProfileId")
                        .HasColumnType("int");

                    b.HasKey("DuraformDesignId", "DuraformEdgeProfileId");

                    b.HasIndex("DuraformEdgeProfileId");

                    b.ToTable("DuraformDesignEdgeProfiles");
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrawerDesign")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformDrawerTypes");
                });

            modelBuilder.Entity("_1_Domain.DuraformEdgeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ForceBottom")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForceLeft")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForceRight")
                        .HasColumnType("bit");

                    b.Property<bool?>("ForceTop")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInDoor")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInDrawer")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInPanel")
                        .HasColumnType("bit");

                    b.Property<bool>("HideInPantry")
                        .HasColumnType("bit");

                    b.Property<string>("ICB_EDGE_TOOLING")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserVar1")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar2")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar3")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar4")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar5")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar6")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar7")
                        .HasColumnType("int");

                    b.Property<int?>("UserVar8")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DuraformEdgeProfiles");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformEnquiryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformEnquiryId");

                    b.ToTable("DuraformMiscComponents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformMiscComponent");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DuraformMiscPrices");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformMiscPrice");
                });

            modelBuilder.Entity("_1_Domain.DuraformOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformOptionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DuraformOptionTypeId");

                    b.ToTable("DuraformOptions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformOption");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformOptionTypes");
                });

            modelBuilder.Entity("_1_Domain.DuraformPriceGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuraformSerieId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinWidth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformSerieId");

                    b.ToTable("DuraformPriceGrids");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DuraformPriceGrid");
                });

            modelBuilder.Entity("_1_Domain.DuraformSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SerieTypeEnum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DuraformSeries");
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsJanperMatching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLaminexMatching")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DuraformWrapTypeId");

                    b.ToTable("DuraformWrapColors");
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ICB_EDGETHICK")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDisabledFromDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("DuraformWrapTypes");
                });

            modelBuilder.Entity("_1_Domain.Enquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnName("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryNote")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("DeliveryPostcode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryState")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliverySuburb")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryTo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnName("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnquiryType")
                        .HasColumnType("int");

                    b.Property<decimal>("GstRate")
                        .HasColumnName("GstRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoicePostcode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceState")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceSuburb")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceTo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastEditted")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<bool>("NotEditable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SubTotal")
                        .HasColumnName("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalGst")
                        .HasColumnName("TotalGst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnName("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Enquiries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Enquiry");
                });

            modelBuilder.Entity("_1_Domain.HingeHoleOption", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Bottom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BottomCenter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HingeHoleStyle")
                        .HasColumnType("int");

                    b.Property<decimal?>("MiddleOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Top")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TopCenter")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HingeHoleStyle");

                    b.ToTable("HingeHoleOptions");
                });

            modelBuilder.Entity("_1_Domain.HingeHoleStyle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("DoorPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("PantryPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("HingeHoleStyles");
                });

            modelBuilder.Entity("_1_Domain.HingeHoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("HingeHoleTypes");
                });

            modelBuilder.Entity("_1_Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReference")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryPostcode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryState")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliverySuburb")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DeliveryTo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DoorColor")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("DoorType")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int");

                    b.Property<decimal>("GstRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceAddress")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoicePostcode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceState")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceSuburb")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("InvoiceTo")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalGst")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EnquiryId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("_1_Domain.InvoiceComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceComponents");
                });

            modelBuilder.Entity("_1_Domain.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Machines");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Machine");
                });

            modelBuilder.Entity("_1_Domain.NotAvailableDesignWrapType", b =>
                {
                    b.Property<int>("DuraformDesignId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasKey("DuraformDesignId", "DuraformWrapTypeId");

                    b.HasIndex("DuraformWrapTypeId");

                    b.ToTable("NotAvailableDesignWrapTypes");
                });

            modelBuilder.Entity("_1_Domain.OnHoldComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("OnHoldComponents");
                });

            modelBuilder.Entity("_1_Domain.PantryDoorChairRailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PantryDoorChairRailTypes");
                });

            modelBuilder.Entity("_1_Domain.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnquiryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryId");

                    b.ToTable("Processes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Process");
                });

            modelBuilder.Entity("_1_Domain.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("_1_Domain.DuraformFile", b =>
                {
                    b.HasBaseType("_1_Domain.ApplicationFile");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("DuraformEnquiryId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformEnquiryId");

                    b.HasDiscriminator().HasValue("DuraformFile");
                });

            modelBuilder.Entity("_1_Domain.CabinetMaker", b =>
                {
                    b.HasBaseType("_1_Domain.Customer");

                    b.HasDiscriminator().HasValue("CabinetMaker");
                });

            modelBuilder.Entity("_1_Domain.Distributor", b =>
                {
                    b.HasBaseType("_1_Domain.Customer");

                    b.HasDiscriminator().HasValue("Distributor");
                });

            modelBuilder.Entity("_1_Domain.Manufacturer", b =>
                {
                    b.HasBaseType("_1_Domain.Customer");

                    b.HasDiscriminator().HasValue("Manufacturer");
                });

            modelBuilder.Entity("_1_Domain.CustomerCategoryAccount", b =>
                {
                    b.HasBaseType("_1_Domain.CustomerCategory");

                    b.Property<int>("DurationInDays")
                        .HasColumnName("DurationInDays")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CustomerCategoryAccount");
                });

            modelBuilder.Entity("_1_Domain.CustomerCategoryCBD", b =>
                {
                    b.HasBaseType("_1_Domain.CustomerCategory");

                    b.HasDiscriminator().HasValue("CustomerCategoryCBD");
                });

            modelBuilder.Entity("_1_Domain.ShippingSheet", b =>
                {
                    b.HasBaseType("_1_Domain.DeliverySheet");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasIndex("DriverId");

                    b.HasIndex("TruckId");

                    b.HasDiscriminator().HasValue("ShippingSheet");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponentWithOption", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponent");

                    b.HasDiscriminator().HasValue("DuraformComponentWithOption");
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawer", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponent");

                    b.Property<decimal?>("DrawerFive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DrawerFour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DrawerGap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DrawerOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DrawerThree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DrawerTwo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DuraformDrawerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasDrillFronts")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDrawers")
                        .HasColumnType("int");

                    b.HasIndex("DuraformDrawerTypeId");

                    b.HasDiscriminator().HasValue("DuraformDrawer");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscCapMould", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscComponent");

                    b.Property<bool>("IsRaw")
                        .HasColumnName("IsRaw")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnName("Size")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformMiscCapMould");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscFingerPull", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscComponent");

                    b.Property<bool>("IsRaw")
                        .HasColumnName("IsRaw")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformMiscFingerPull");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscHeatStrip", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscComponent");

                    b.Property<int>("Size")
                        .HasColumnName("Size")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformMiscHeatStrip");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscLooseFoil", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscComponent");

                    b.HasDiscriminator().HasValue("DuraformMiscLooseFoil");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceCapMould", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscPrice");

                    b.Property<int?>("DuraformWrapTypeId")
                        .HasColumnName("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformWrapTypeId");

                    b.HasDiscriminator().HasValue("DuraformMiscPriceCapMould");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceFingerPull", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscPrice");

                    b.Property<int?>("DuraformWrapTypeId")
                        .HasColumnName("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformWrapTypeId")
                        .HasName("IX_DuraformMiscPrices_DuraformWrapTypeId1");

                    b.HasDiscriminator().HasValue("DuraformMiscPriceFingerPull");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceHeatStrip", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscPrice");

                    b.Property<int>("HeatStripSize")
                        .HasColumnName("HeatStripSize")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformMiscPriceHeatStrip");
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceLooseFoil", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformMiscPrice");

                    b.Property<int?>("DuraformWrapTypeId")
                        .HasColumnName("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformWrapTypeId")
                        .HasName("IX_DuraformMiscPrices_DuraformWrapTypeId2");

                    b.HasDiscriminator().HasValue("DuraformMiscPriceLooseFoil");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionAngledShelf", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<bool>("IsDoubleSided")
                        .HasColumnName("IsDoubleSided")
                        .HasColumnType("bit");

                    b.Property<decimal>("SideOne")
                        .HasColumnName("SideOne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SideTwo")
                        .HasColumnName("SideTwo")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformOptionAngledShelf");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionDoubleSided", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<bool>("HasProfile")
                        .HasColumnName("HasProfile")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("DuraformOptionDoubleSided");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionFoldBack", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<int>("FoldingType")
                        .HasColumnType("int");

                    b.Property<bool>("HasProfile")
                        .HasColumnName("HasProfile")
                        .HasColumnType("bit");

                    b.Property<decimal>("LeftLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RightLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformOptionFoldBack");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionMicrowaveFrame", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<decimal>("BottomSize")
                        .HasColumnName("BottomSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LeftSize")
                        .HasColumnName("LeftSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RightSize")
                        .HasColumnName("RightSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TopSize")
                        .HasColumnName("TopSize")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformOptionMicrowaveFrame");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionNoFace", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.HasDiscriminator().HasValue("DuraformOptionNoFace");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionPaneFrame", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<int>("Columns")
                        .HasColumnType("int");

                    b.Property<int>("Rows")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DuraformOptionPaneFrame");
                });

            modelBuilder.Entity("_1_Domain.DuraformOptionRollerShutterFrame", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformOption");

                    b.Property<decimal>("LeftSize")
                        .HasColumnName("LeftSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RightSize")
                        .HasColumnName("RightSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TopSize")
                        .HasColumnName("TopSize")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformOptionRollerShutterFrame");
                });

            modelBuilder.Entity("_1_Domain.DuraformRouteOnlyPriceGrid", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformPriceGrid");

                    b.HasDiscriminator().HasValue("DuraformRouteOnlyPriceGrid");
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapPriceGrid", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformPriceGrid");

                    b.Property<int>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.HasIndex("DuraformWrapTypeId");

                    b.HasDiscriminator().HasValue("DuraformWrapPriceGrid");
                });

            modelBuilder.Entity("_1_Domain.DuraformEnquiry", b =>
                {
                    b.HasBaseType("_1_Domain.Enquiry");

                    b.Property<int?>("DuraformArchId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformDesignId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformEdgeProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DuraformSerieId")
                        .HasColumnType("int");

                    b.Property<int?>("DuraformWrapColorId")
                        .HasColumnType("int");

                    b.Property<int?>("DuraformWrapTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HingeHoleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRoutingOnly")
                        .HasColumnType("bit");

                    b.HasIndex("DuraformArchId");

                    b.HasIndex("DuraformDesignId");

                    b.HasIndex("DuraformEdgeProfileId");

                    b.HasIndex("DuraformSerieId");

                    b.HasIndex("DuraformWrapColorId");

                    b.HasIndex("DuraformWrapTypeId");

                    b.HasIndex("HingeHoleTypeId");

                    b.HasDiscriminator().HasValue("DuraformEnquiry");
                });

            modelBuilder.Entity("_1_Domain.MachineCleaning", b =>
                {
                    b.HasBaseType("_1_Domain.Machine");

                    b.HasDiscriminator().HasValue("MachineCleaning");
                });

            modelBuilder.Entity("_1_Domain.MachineCutter", b =>
                {
                    b.HasBaseType("_1_Domain.Machine");

                    b.HasDiscriminator().HasValue("MachineCutter");
                });

            modelBuilder.Entity("_1_Domain.MachinePacking", b =>
                {
                    b.HasBaseType("_1_Domain.Machine");

                    b.HasDiscriminator().HasValue("MachinePacking");
                });

            modelBuilder.Entity("_1_Domain.MachinePresser", b =>
                {
                    b.HasBaseType("_1_Domain.Machine");

                    b.HasDiscriminator().HasValue("MachinePresser");
                });

            modelBuilder.Entity("_1_Domain.MachineRouter", b =>
                {
                    b.HasBaseType("_1_Domain.Machine");

                    b.HasDiscriminator().HasValue("MachineRouter");
                });

            modelBuilder.Entity("_1_Domain.ProcessCleaning", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.Property<int?>("MachineId")
                        .HasColumnName("MachineId")
                        .HasColumnType("int");

                    b.HasIndex("MachineId");

                    b.HasDiscriminator().HasValue("ProcessCleaning");
                });

            modelBuilder.Entity("_1_Domain.ProcessDelivering", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.Property<int?>("DeliverySheetId")
                        .HasColumnType("int");

                    b.HasIndex("DeliverySheetId");

                    b.HasDiscriminator().HasValue("ProcessDelivering");
                });

            modelBuilder.Entity("_1_Domain.ProcessPacking", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.Property<int?>("MachineId")
                        .HasColumnName("MachineId")
                        .HasColumnType("int");

                    b.HasIndex("MachineId")
                        .HasName("IX_Processes_MachineId1");

                    b.HasDiscriminator().HasValue("ProcessPacking");
                });

            modelBuilder.Entity("_1_Domain.ProcessPreRoute", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.HasDiscriminator().HasValue("ProcessPreRoute");
                });

            modelBuilder.Entity("_1_Domain.ProcessPressing", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.Property<int?>("MachineId")
                        .HasColumnName("MachineId")
                        .HasColumnType("int");

                    b.HasIndex("MachineId")
                        .HasName("IX_Processes_MachineId2");

                    b.HasDiscriminator().HasValue("ProcessPressing");
                });

            modelBuilder.Entity("_1_Domain.ProcessRouting", b =>
                {
                    b.HasBaseType("_1_Domain.Process");

                    b.Property<int?>("MachineId")
                        .HasColumnName("MachineId")
                        .HasColumnType("int");

                    b.HasIndex("MachineId")
                        .HasName("IX_Processes_MachineId3");

                    b.HasDiscriminator().HasValue("ProcessRouting");
                });

            modelBuilder.Entity("_1_Domain.DuraformComponentWithOptionAndHingeHole", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOption");

                    b.HasDiscriminator().HasValue("DuraformComponentWithOptionAndHingeHole");
                });

            modelBuilder.Entity("_1_Domain.DuraformEndPanel", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOption");

                    b.Property<decimal?>("ExtraRailBottom")
                        .HasColumnName("ExtraRailBottom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExtraRailTop")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberOfShields")
                        .HasColumnType("int");

                    b.Property<decimal>("RailCenter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RailLeft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RailRight")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("DuraformEndPanel");
                });

            modelBuilder.Entity("_1_Domain.DuraformDoor", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOptionAndHingeHole");

                    b.HasDiscriminator().HasValue("DuraformDoor");
                });

            modelBuilder.Entity("_1_Domain.DuraformPantryDoor", b =>
                {
                    b.HasBaseType("_1_Domain.DuraformComponentWithOptionAndHingeHole");

                    b.Property<decimal>("ChairRailHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChairRailTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExtraRailBottom")
                        .HasColumnName("ExtraRailBottom")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("ChairRailTypeId");

                    b.HasDiscriminator().HasValue("DuraformPantryDoor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.ApplicationUser", b =>
                {
                    b.HasOne("_1_Domain.Customer", "Customer")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.Customer", b =>
                {
                    b.HasOne("_1_Domain.CustomerCategory", "CustomerCategory")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.Customer", "Manager")
                        .WithMany("ManagedCustomers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.DuraformComponent", b =>
                {
                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DuraformEdgeProfile")
                        .WithMany("DuraformComponents")
                        .HasForeignKey("DuraformEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformEnquiry", "DuraformEnquiry")
                        .WithMany("DuraformComponents")
                        .HasForeignKey("DuraformEnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformDesign", b =>
                {
                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DefaultEdgeProfile")
                        .WithMany("DuraformDesignsWithDefault")
                        .HasForeignKey("DefaultEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformSerie", "DuraformSerie")
                        .WithMany("DuraformDesigns")
                        .HasForeignKey("DuraformSerieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformDesignEdgeProfile", b =>
                {
                    b.HasOne("_1_Domain.DuraformDesign", "DuraformDesign")
                        .WithMany("AllowedEdgeProfiles")
                        .HasForeignKey("DuraformDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DuraformEdgeProfile")
                        .WithMany("DuraformDesignEdgeProfiles")
                        .HasForeignKey("DuraformEdgeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscComponent", b =>
                {
                    b.HasOne("_1_Domain.DuraformEnquiry", "DuraformEnquiry")
                        .WithMany("MiscComponents")
                        .HasForeignKey("DuraformEnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformOption", b =>
                {
                    b.HasOne("_1_Domain.DuraformOptionType", "DuraformOptionType")
                        .WithMany("DuraformOptions")
                        .HasForeignKey("DuraformOptionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformComponentWithOption", "DuraformComponentWithOption")
                        .WithOne("DuraformOption")
                        .HasForeignKey("_1_Domain.DuraformOption", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformPriceGrid", b =>
                {
                    b.HasOne("_1_Domain.DuraformSerie", "DuraformSerie")
                        .WithMany("DuraformPriceGrids")
                        .HasForeignKey("DuraformSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapColor", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformWrapColors")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.Enquiry", b =>
                {
                    b.HasOne("_1_Domain.ApplicationUser", "Creator")
                        .WithMany("Enquiries")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.Customer", "Customer")
                        .WithMany("OrderedEnquiries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.Customer", "Manager")
                        .WithMany("ManagedEnquiries")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.HingeHoleOption", b =>
                {
                    b.HasOne("_1_Domain.HingeHoleStyle", "HingeStyle")
                        .WithMany("HingeHoleOptions")
                        .HasForeignKey("HingeHoleStyle")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformComponentWithOptionAndHingeHole", "DuraformComponentWithOptionAndHingeHole")
                        .WithOne("HingeHoleOption")
                        .HasForeignKey("_1_Domain.HingeHoleOption", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.Invoice", b =>
                {
                    b.HasOne("_1_Domain.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.Enquiry", "Enquiry")
                        .WithOne("Invoice")
                        .HasForeignKey("_1_Domain.Invoice", "EnquiryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.InvoiceComponent", b =>
                {
                    b.HasOne("_1_Domain.Invoice", "Invoice")
                        .WithMany("InvoiceComponents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.NotAvailableDesignWrapType", b =>
                {
                    b.HasOne("_1_Domain.DuraformDesign", "DuraformDesign")
                        .WithMany("NotAvailableDesignWrapTypes")
                        .HasForeignKey("DuraformDesignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("NotAvailableDesignWrapTypes")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.OnHoldComponent", b =>
                {
                    b.HasOne("_1_Domain.Process", "Process")
                        .WithMany("OnHoldComponents")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.Process", b =>
                {
                    b.HasOne("_1_Domain.Enquiry", "Enquiry")
                        .WithMany("Processes")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformFile", b =>
                {
                    b.HasOne("_1_Domain.DuraformEnquiry", "DuraformEnquiry")
                        .WithMany("DuraformFiles")
                        .HasForeignKey("DuraformEnquiryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.ShippingSheet", b =>
                {
                    b.HasOne("_1_Domain.Driver", "Driver")
                        .WithMany("ShippingSheets")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.Truck", "Truck")
                        .WithMany("ShippingSheets")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformDrawer", b =>
                {
                    b.HasOne("_1_Domain.DuraformDrawerType", "DuraformDrawerType")
                        .WithMany("DuraformDrawers")
                        .HasForeignKey("DuraformDrawerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceCapMould", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformMiscPriceCapMoulds")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceFingerPull", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformMiscPriceFingerPulls")
                        .HasForeignKey("DuraformWrapTypeId")
                        .HasConstraintName("FK_DuraformMiscPrices_DuraformWrapTypes_DuraformWrapTypeId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_1_Domain.DuraformMiscPriceLooseFoil", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformMiscPriceLooseFoils")
                        .HasForeignKey("DuraformWrapTypeId")
                        .HasConstraintName("FK_DuraformMiscPrices_DuraformWrapTypes_DuraformWrapTypeId2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_1_Domain.DuraformWrapPriceGrid", b =>
                {
                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformWrapPriceGrids")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("_1_Domain.DuraformEnquiry", b =>
                {
                    b.HasOne("_1_Domain.DuraformArch", "DuraformArch")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformArchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.DuraformDesign", "DuraformDesign")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformDesignId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformEdgeProfile", "DuraformEdgeProfile")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformEdgeProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformSerie", "DuraformSerie")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformSerieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1_Domain.DuraformWrapColor", "DuraformWrapColor")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformWrapColorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.DuraformWrapType", "DuraformWrapType")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("DuraformWrapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_1_Domain.HingeHoleType", "HingeHoleType")
                        .WithMany("DuraformEnquiries")
                        .HasForeignKey("HingeHoleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.ProcessCleaning", b =>
                {
                    b.HasOne("_1_Domain.MachineCleaning", "MachineCleaning")
                        .WithMany("DuraformProcessCleanings")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.ProcessDelivering", b =>
                {
                    b.HasOne("_1_Domain.DeliverySheet", "DeliverySheet")
                        .WithMany("ProcessDeliverings")
                        .HasForeignKey("DeliverySheetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.ProcessPacking", b =>
                {
                    b.HasOne("_1_Domain.MachinePacking", "MachinePacking")
                        .WithMany("DuraformProcessPackings")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Processes_Machines_MachineId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.ProcessPressing", b =>
                {
                    b.HasOne("_1_Domain.MachinePresser", "MachinePresser")
                        .WithMany("DuraformProcessPressings")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Processes_Machines_MachineId2")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.ProcessRouting", b =>
                {
                    b.HasOne("_1_Domain.MachineRouter", "MachineRouter")
                        .WithMany("DuraformProcessRoutings")
                        .HasForeignKey("MachineId")
                        .HasConstraintName("FK_Processes_Machines_MachineId3")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("_1_Domain.DuraformPantryDoor", b =>
                {
                    b.HasOne("_1_Domain.PantryDoorChairRailType", "ChairRailType")
                        .WithMany("DuraformPantryDoors")
                        .HasForeignKey("ChairRailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
